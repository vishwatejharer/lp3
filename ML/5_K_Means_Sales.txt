import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

df = pd.read_csv("sales_data_sample.csv",encoding='latin1')

df.head()

df.describe()

df.info()

X = df.iloc[:, [1, 3]].values
X

WCSS = [] # Within-Cluster Sum of Square

for i in range(1,11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)
    kmeans.fit(X)
    WCSS.append(kmeans.inertia_)

plt.plot(range(1,11), WCSS)
plt.title("The elbow method")
plt.xlabel("Number of cluster")
plt.ylabel('WCSS') 
plt.show()

#The point at which the elbow shape is created is 3, that is, our K value or an optimal number of clusters is 3.
kmeans = KMeans(n_clusters = 3, init = "k-means++", random_state = 42)
y_kmeans = kmeans.fit_predict(X)

y_kmeans

#Visualising the cluster
plt.scatter(X[y_kmeans == 0,0], X[y_kmeans == 0,1], s=60, c = 'red', label='Cluster1')
plt.scatter(X[y_kmeans == 1,0], X[y_kmeans == 1,1], s=60, c='blue', label='Cluster2')
plt.scatter(X[y_kmeans == 2,0], X[y_kmeans == 2,1], s=60, c='green', label='Cluster3')
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c = 'black', label ='Centroids')

plt.xlabel('QUANTITYORDERED') 
plt.ylabel('ORDERLINENUMBER') 
plt.legend()
plt.show()